version: '3'
networks:
  groceryshop:
    external: true
volumes:
  db:
    driver:
      local

  notificationdb:
    driver:
      local

services:
  auth:
    container_name: auth
    build:
      context: ./
      dockerfile: Dockerfile.dev
    environment:
      domain: ${DOMAIN}
    volumes:
      - ./:/app
    ports:
      - ${SERVER_PORT}:3000
    env_file:
      - .env
    networks:
      - groceryshop
    depends_on:
      - redis
      - authdb

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      - groceryshop
    volumes:
      - "./data/redis:/data"

  authdb:
    image: mysql:5.7
    container_name: authdb
    networks:
      - groceryshop
    ports:
      - "3307:3306"
    volumes:
      - "./data/auth:/docker-entrypoint-initdb.d"
      - "db:/var/lib/mysql"
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE_NAME}

#  notification:
#    container_name: notification
#    image: 575598310632.dkr.ecr.us-east-1.amazonaws.com/notification
#    environment:
#      domain: ${DOMAIN}
#    restart: always
#    ports:
#      - 9001:3000
#    env_file:
#      - .env
#    networks:
#      - groceryshop
#    external_links:
#      - auth
#      - notificationdb
#    depends_on:
#      - notificationdb
#
#  notificationdb:
#    image: mysql:5.7
#    container_name: notificationdb
#    networks:
#      - groceryshop
#    ports:
#      - "3309:3306"
#    volumes:
#      - "./db.sql:/docker-entrypoint-initdb.d/db.sql"
#      - "notificationdb:/var/lib/mysql"
#    restart: unless-stopped
#    command: --default-authentication-plugin=mysql_native_password
#    environment:
#      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
#      MYSQL_USER: ${DB_USERNAME}
#      MYSQL_PASSWORD: ${DB_PASSWORD}
#      MYSQL_DATABASE: notification

  # zoo1:
  #   image: zookeeper:3.4.9
  #   restart: unless-stopped
  #   hostname: zoo1
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOO_MY_ID: 1
  #     ZOO_PORT: 2181
  #     ZOO_SERVERS: server.1=zoo1:2888:3888
  #   networks:
  #     - groceryshop
  #   volumes:
  #     - ./full-stack/zoo1/data:/data192.168.0.110
  #     - ./full-stack/zoo1/datalog:/datalog

  # kafka1:
  #   image: confluentinc/cp-kafka:5.2.1
  #   hostname: kafka1
  #   ports:
  #     - "9092:9092"
  #   networks:
  #     - groceryshop
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://192.168.0.110:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - ./full-stack/kafka1/data:/var/lib/kafka/data
  #   depends_on:
  #     - zoo1


  rabbitmq:
    image: rabbitmq:3-management
    ports: 
      - 15672:15672
      - 5672:5672
    networks:
      - groceryshop
    environment: 
      RABBITMQ_DEFAULT_PASS: pass
      RABBITMQ_DEFAULT_USER: user
  # secure-rabbitmq:
  #   image: rabbitmq:3-management
  #   ports:
  #     - 15673:15672
  #     - 5673:5672
  #   environment: 
  #     RABBITMQ_DEFAULT_PASS: pass
  #     RABBITMQ_DEFAULT_USER: user
